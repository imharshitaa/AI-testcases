#!/usr/bin/env python3
"""
tools_tester.py — Minimal tools wrapper for payload artifact generation.

Purpose:
- Prepare curl scripts for each payload from payload_generator.generate_all()
- Optionally run a single curl script
- Export payload lists for Burp Intruder (CSV and TXT)
- Intended for authorized testing ONLY.

Usage examples:
  python tools_tester.py --generate-scripts --api-url https://api.testbed.local/agent --api-key TEST_API_KEY
  python tools_tester.py --generate-scripts --run-sample 0
  python tools_tester.py --create-burp-files
"""

import argparse
import json
import os
import shlex
import subprocess
from typing import List, Dict
from payload_generator import generate_all  # Must exist

# Default output folder for artifacts
OUT_DIR = "artifacts"
os.makedirs(OUT_DIR, exist_ok=True)


def sanitize_filename(name: str) -> str:
    """Basic filename sanitizer."""
    return "".join(c if c.isalnum() or c in "._-" else "_" for c in name)[:200]


def write_curl_scripts(payloads: List[Dict], api_url: str, api_key: str, out_dir: str = OUT_DIR) -> None:
    """
    For each payload, write:
      - body_<i>.json  (payload body file)
      - curl_req_<i>.sh (curl script referencing the body file)
    Using @bodyfile avoids tricky shell quoting.
    """
    print(f"[+] Writing curl scripts into directory: {out_dir}")
    for i, item in enumerate(payloads):
        payload_type = item.get("type", "unknown")
        payload_text = item.get("payload", "")

        # Compose a stable JSON conversation body
        body = {
            "conversation": [
                {"role": "system", "content": "Do not reveal secrets."},
                {"role": "user", "content": payload_text},
            ],
            "meta": {"test_payload_type": payload_type}
        }

        body_fname = os.path.join(out_dir, f"body_{i}.json")
        script_fname = os.path.join(out_dir, f"curl_req_{i}.sh")

        # Write body file (UTF-8)
        with open(body_fname, "w", encoding="utf-8") as bf:
            json.dump(body, bf, ensure_ascii=False, indent=2)

        # Build curl command that reads data from file to avoid quoting problems
        curl_cmd = (
            f"curl -s -X POST {shlex.quote(api_url)} "
            f"-H 'Authorization: Bearer {shlex.quote(api_key)}' "
            f"-H 'Content-Type: application/json' "
            f"--data-binary @{shlex.quote(body_fname)}\n"
        )

        # Write script file
        with open(script_fname, "w", encoding="utf-8") as sf:
            sf.write("#!/bin/bash\n")
            sf.write("# Auto-generated curl script — authorized testing only\n")
            sf.write(curl_cmd)

        # Make script executable
        try:
            os.chmod(script_fname, 0o750)
        except Exception:
            pass

        print(f" - Wrote [{i}] type={payload_type} -> {os.path.basename(script_fname)}")


def run_curl_script(index: int, out_dir: str = OUT_DIR) -> int:
    """
    Execute one generated curl shell script by index. Returns process return code.
    """
    script_fname = os.path.join(out_dir, f"curl_req_{index}.sh")
    if not os.path.exists(script_fname):
        raise FileNotFoundError(f"Script not found: {script_fname}")
    print(f"[+] Running {script_fname} (authorized test only)...")
    # Use subprocess.run to execute
    proc = subprocess.run(["bash", script_fname], capture_output=True, text=True)
    print(f"--- STDOUT ---\n{proc.stdout}")
    print(f"--- STDERR ---\n{proc.stderr}")
    print(f"[+] Exit code: {proc.returncode}")
    return proc.returncode


def create_burp_payload_files(payloads: List[Dict], out_dir: str = OUT_DIR) -> None:
    """
    Export payloads to:
      - burp_payloads.txt (one payload per line)
      - burp_payloads.csv (CSV suitable for importing)
    These can be used as payload lists for Burp Intruder or similar tools.
    """
    txt_path = os.path.join(out_dir, "burp_payloads.txt")
    csv_path = os.path.join(out_dir, "burp_payloads.csv")

    print(f"[+] Creating Burp payload files in: {out_dir}")
    with open(txt_path, "w", encoding="utf-8") as tf, open(csv_path, "w", encoding="utf-8") as cf:
        cf.write("payload_type,payload\n")
        for item in payloads:
            ptype = item.get("type", "unknown")
            payload = item.get("payload", "")
            # Write plain text list
            tf.write(payload.replace("\n", "\\n") + "\n")
            # Basic CSV escaping
            safe_payload = payload.replace('"', '""')
            cf.write(f'"{ptype}","{safe_payload}"\n')
    print(f" - Wrote {os.path.basename(txt_path)} and {os.path.basename(csv_path)}")


def main():
    parser = argparse.ArgumentParser(description="Tools-based tester: generate curl scripts and payload artifacts.")
    parser.add_argument("--api-url", "-u", help="Target API URL (e.g., https://api.testbed.local/agent)")
    parser.add_argument("--api-key", "-k", help="API key / bearer token for Authorization header")
    parser.add_argument("--generate-scripts", action="store_true", help="Generate curl scripts and body files")
    parser.add_argument("--run-sample", type=int, default=None, help="Run one generated curl script by index")
    parser.add_argument("--create-burp-files", action="store_true", help="Create burp payload files (txt + csv)")
    parser.add_argument("--out-dir", default=OUT_DIR, help="Output directory for artifacts")
    args = parser.parse_args()

    # Interactive fallback if not provided
    api_url = args.api_url or input("Enter target API URL (authorized test endpoint): ").strip()
    api_key = args.api_key or input("Enter API key (Bearer token) for test endpoint: ").strip()

    # Basic validation
    if not api_url:
        print("[ERROR] API URL required. Exiting.")
        return
    if not api_key:
        print("[ERROR] API key required. Exiting.")
        return

    payloads = generate_all()

    # Ensure output directory exists
    out_dir = args.out_dir
    os.makedirs(out_dir, exist_ok=True)

    if args.generate_scripts:
        write_curl_scripts(payloads, api_url, api_key, out_dir=out_dir)

    if args.create_burp_files:
        create_burp_payload_files(payloads, out_dir=out_dir)

    if args.run_sample is not None:
        try:
            run_curl_script(args.run_sample, out_dir=out_dir)
        except Exception as e:
            print("[ERROR] Failed to run script:", e)

    if not (args.generate_scripts or args.create_burp_files or args.run_sample is not None):
        # If nothing selected, show helpful message
        print("\nNo action requested. Examples:")
        print("  python tools_tester.py --generate-scripts --api-url https://api.testbed.local/agent --api-key TEST_API_KEY")
        print("  python tools_tester.py --generate-scripts --run-sample 0")
        print("  python tools_tester.py --create-burp-files --api-url https://api.testbed.local/agent --api-key TEST_API_KEY")


if __name__ == "__main__":
    main()
